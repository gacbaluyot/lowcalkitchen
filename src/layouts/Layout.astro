---
import { ViewTransitions } from 'astro:transitions';
import ThemeToggle from '../components/ThemeToggle';
import Logo from '../components/Logo';
import Footer from '../components/Footer';
import MobileMenu from '../components/MobileMenu';
import CookieBanner from '../components/CookieBanner';
import UserMenu from '../components/UserMenu';
import '../styles/auth.css';

interface Props {
  title?: string;
  description?: string;
  image?: string;
  type?: string;
  publishDate?: string;
  modifiedDate?: string;
  author?: string;
  section?: string;
}

const { 
  title = 'LowCal Kitchen - Healthy, High-Protein Recipes for Every Day',
  description = 'Discover protein-rich, healthy recipes for a balanced lifestyle. From lean meats to nutritious meals, find your next favorite high-protein recipe here.',
  image = 'https://images.unsplash.com/photo-1543339308-43e59d6b73a6?q=80',
  type = 'website',
  publishDate,
  modifiedDate,
  author = 'LowCal Kitchen',
  section
} = Astro.props;

const siteUrl = import.meta.env.DEV ? `http://localhost:${import.meta.env.PORT || 4321}` : 'https://lowcalkitchen.com';
const canonicalURL = new URL(Astro.url.pathname, siteUrl).toString();
const fullImageUrl = image.startsWith('http') ? image : new URL(image, siteUrl).toString();
const adClient = import.meta.env.PUBLIC_ADSENSE_CLIENT_ID;

// Default organization schema
const organizationSchema = {
  "@context": "https://schema.org",
  "@type": "Organization",
  "name": "LowCal Kitchen",
  "url": siteUrl,
  "logo": `${siteUrl}/favicon.svg`,
  "sameAs": [
    "https://instagram.com/lowcalkitchen",
    "https://facebook.com/lowcalkitchen",
    "https://pinterest.com/lowcalkitchen",
    "https://youtube.com/lowcalkitchen"
  ]
};

// Website schema
const websiteSchema = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": "LowCal Kitchen",
  "url": siteUrl,
  "description": "Discover healthy, protein-rich recipes for a balanced lifestyle",
  "publisher": {
    "@type": "Organization",
    "name": "LowCal Kitchen",
    "logo": {
      "@type": "ImageObject",
      "url": `${siteUrl}/favicon.svg`
    }
  }
};
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={fullImageUrl} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:site_name" content="LowCal Kitchen" />
    <meta property="og:locale" content="en_US" />
    {publishDate && <meta property="article:published_time" content={publishDate} />}
    {modifiedDate && <meta property="article:modified_time" content={modifiedDate} />}
    {author && <meta property="article:author" content={author} />}
    {section && <meta property="article:section" content={section} />}

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={fullImageUrl} />
    <meta name="twitter:creator" content="@lowcalkitchen" />

    <!-- Preload critical assets -->
    <link rel="preload" href="/favicon.svg" as="image" type="image/svg+xml" />
    
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="preconnect" href="https://images.unsplash.com" crossorigin />

    <!-- Defer non-critical CSS -->
    <link 
      href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Plus+Jakarta+Sans:wght@400;500;600;700&display=swap" 
      rel="stylesheet"
      media="print"
      onload="this.media='all'"
    />

    <!-- Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify(organizationSchema)} />
    <script type="application/ld+json" set:html={JSON.stringify(websiteSchema)} />

    <!-- Add Google AdSense verification meta tag -->
    <meta name="google-adsense-account" content={adClient} />

    <!-- Add Google AdSense script -->
    <script async src={`https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=${adClient}`}
    crossorigin="anonymous"></script>


    <ViewTransitions />

    <!-- Critical CSS -->
    <style is:inline>
      /* Add critical CSS here */
      :root {
        --font-sans: 'Plus Jakarta Sans', system-ui, -apple-system, sans-serif;
        --font-serif: 'Playfair Display', Georgia, serif;
      }
      body {
        font-family: var(--font-sans);
        margin: 0;
        padding: 0;
      }
      .nav-fixed {
        position: fixed;
        width: 100%;
        top: 0;
        z-index: 50;
      }
    </style>

    <!-- Toast notification system -->
    <script>
      function showToast(message: string, type: 'success' | 'info' | 'error' = 'success', duration = 3000) {
        const container = document.getElementById('toast-container');
        if (!container) return;

        // Create toast element
        const toast = document.createElement('div');
        toast.className = `flex items-center p-4 mb-3 max-w-xs rounded-lg shadow-lg transition-all transform translate-x-0 ${
          type === 'success'
            ? 'bg-green-50 text-green-800 dark:bg-green-900/50 dark:text-green-200 border-l-4 border-green-500'
            : type === 'error'
              ? 'bg-red-50 text-red-800 dark:bg-red-900/50 dark:text-red-200 border-l-4 border-red-500'
              : 'bg-blue-50 text-blue-800 dark:bg-blue-900/50 dark:text-blue-200 border-l-4 border-blue-500'
        }`;

        // Set toast content
        toast.innerHTML = `
          <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              ${type === 'success' 
                ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />'
                : type === 'error'
                  ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />'
                  : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />'
              }
            </svg>
            <div class="ml-3 text-sm font-medium">${message}</div>
          </div>
          <button type="button" class="ml-auto -mx-1.5 -my-1.5 rounded-lg p-1.5 inline-flex h-8 w-8 hover:bg-gray-200 dark:hover:bg-gray-700" aria-label="Close">
            <span class="sr-only">Close</span>
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
              <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
            </svg>
          </button>
        `;

        // Add toast to container with animation
        container.appendChild(toast);
        setTimeout(() => toast.classList.add('toast-enter'), 10);

        // Setup close button
        const closeButton = toast.querySelector('button');
        closeButton?.addEventListener('click', () => {
          toast.classList.add('toast-exit');
          setTimeout(() => toast.remove(), 300);
        });

        // Auto remove after duration
        setTimeout(() => {
          if (toast.parentNode) {
            toast.classList.add('toast-exit');
            setTimeout(() => toast.remove(), 300);
          }
        }, duration);
      }

      // Listen for favorite button events
      document.addEventListener('DOMContentLoaded', () => {
        // Find the favorite button in the DOM
        const favoriteBtn = document.querySelector('.favorite-btn') as HTMLElement;
        const shareBtn = document.querySelector('.share-btn') as HTMLElement;

        if (favoriteBtn) {
          // Replace the original click handler with our enhanced version
          const originalClickHandler = favoriteBtn.onclick;
          favoriteBtn.onclick = async (e) => {
            // Get the current state before toggling
            const wasAlreadyFavorited = favoriteBtn.classList.contains('favorited');

            // Call the original handler
            if (originalClickHandler) {
              originalClickHandler.call(favoriteBtn, e);
            }

            // Show appropriate toast message based on the previous state
            if (wasAlreadyFavorited) {
              showToast('Recipe removed from favorites', 'info');
            } else {
              showToast('Recipe added to favorites!', 'success');
            }
          };
        }

        if (shareBtn) {
          shareBtn.addEventListener('click', () => {
            showToast('Recipe link copied to clipboard!', 'success');
          });
        }

        // Setup a custom event listener as a fallback approach
        window.addEventListener('favoriteToggled', (e) => {
          const event = e as CustomEvent;
          const isFavorited = event.detail?.isFavorited;

          if (isFavorited === true) {
            showToast('Recipe added to favorites!', 'success');
          } else if (isFavorited === false) {
            showToast('Recipe removed from favorites', 'info');
          }
        });
      });
    </script>
  </head>
  <body class="font-sans bg-gray-50 dark:bg-gray-900 transition-colors">
    <nav class="bg-white dark:bg-gray-800 shadow-md fixed w-full top-0 z-50">
      <div class="max-w-7xl mx-auto px-4 py-4">
        <div class="flex justify-between items-center">
          <a href="/" class="hover:opacity-90 transition-opacity">
            <Logo client:load />
          </a>
          
          <!-- Desktop Navigation -->
          <div class="hidden md:flex items-center">
            <div class="flex items-center space-x-8">
              <a href="/" class="text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-white">Home</a>
              <a href="/recipes" class="text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-white">Recipes</a>
              <a href="/calculator" class="text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-white">Calculator</a>
              <a href="/blog" class="text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-white">Blog</a>
              <div class="flex items-center">
                <div class="mr-8">
                  <ThemeToggle client:load />
                </div>
                <UserMenu client:load />
              </div>
            </div>
          </div>

          <!-- Mobile Navigation -->
          <div class="md:hidden">
            <MobileMenu client:load />
          </div>
        </div>
      </div>
    </nav>
    <main class="max-w-7xl mx-auto px-4 py-8 mt-[88px]">
      <slot />
    </main>
    <Footer client:load />
    <CookieBanner client:load />
    
    <!-- Toast container for notifications -->
    <div id="toast-container" class="fixed top-4 right-4 z-50 flex flex-col items-end gap-2"></div>
  </body>
</html>

<style>
/* Toast animations */
@keyframes fadeIn {
  from { opacity: 0; transform: translateX(20px); }
  to { opacity: 1; transform: translateX(0); }
}

@keyframes fadeOut {
  from { opacity: 1; transform: translateX(0); }
  to { opacity: 0; transform: translateX(20px); }
}

.toast-enter {
  animation: fadeIn 0.3s ease-out forwards;
}

.toast-exit {
  animation: fadeOut 0.3s ease-out forwards;
}
</style>