---
import Layout from '../../layouts/Layout.astro';
import { supabase, type Recipe } from '@/lib/supabase';
import ShareButton from '@/components/ShareButton';
import GoogleAds from '@/components/GoogleAds';
import RecipeRating from '@/components/RecipeRating';
import FavoriteButton from '@/components/FavoriteButton';

export async function getStaticPaths() {
  const { data: recipes } = await supabase
    .from('recipes')
    .select('*');

  if (!recipes) {
    return [];
  }

  const recipesWithRatings = await Promise.all(
    recipes.map(async (recipe) => {
      const { data: ratings } = await supabase
        .from('recipe_ratings')
        .select('rating')
        .eq('recipe_id', recipe.id);

      const averageRating = ratings?.length
        ? ratings.reduce((acc, curr) => acc + curr.rating, 0) / ratings.length
        : 0;

      return {
        params: { slug: recipe.slug },
        props: {
          recipe,
          averageRating,
          totalRatings: ratings?.length || 0
        }
      };
    })
  );

  return recipesWithRatings;
}

const { recipe, averageRating, totalRatings } = Astro.props;
const publishDate = new Date(recipe.publish_date).toISOString();

// Get the full URL for sharing
const siteUrl = import.meta.env.DEV ? `http://localhost:${import.meta.env.PORT || 4321}` : 'https://lowcalkitchen.com';
const canonicalURL = new URL(Astro.url.pathname, siteUrl).toString();
const fullImageUrl = recipe.image.startsWith('http') ? recipe.image : new URL(recipe.image, siteUrl).toString();

// Prepare structured data for the recipe
const structuredData = {
  "@context": "https://schema.org",
  "@type": "Recipe",
  name: recipe.title,
  description: recipe.description,
  image: fullImageUrl,
  author: {
    "@type": "Organization",
    name: "LowCal Kitchen"
  },
  datePublished: publishDate,
  prepTime: `PT${recipe.cooking_time}M`,
  cookTime: `PT${recipe.cooking_time}M`,
  totalTime: `PT${recipe.cooking_time}M`,
  recipeYield: `${recipe.servings} servings`,
  recipeIngredient: recipe.ingredients,
  recipeInstructions: recipe.instructions.map((step, index) => ({
    "@type": "HowToStep",
    position: index + 1,
    text: step
  })),
  keywords: recipe.tags?.join(", "),
  aggregateRating: {
    "@type": "AggregateRating",
    ratingValue: averageRating,
    ratingCount: totalRatings,
    bestRating: "5",
    worstRating: "1"
  },
  nutrition: {
    "@type": "NutritionInformation",
    calories: `${recipe.calories} calories`,
    proteinContent: `${recipe.protein}g`,
    carbohydrateContent: `${recipe.carbs}g`,
    fatContent: `${recipe.fat}g`
  }
};
---

<Layout
  title={`${recipe.title} - LowCal Kitchen`}
  description={recipe.description}
  image={fullImageUrl}
  type="recipe"
>
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />

  <!-- Toast container for notifications -->
  <div id="toast-container" class="fixed top-4 right-4 z-50 flex flex-col items-end gap-2"></div>

  <article class="max-w-4xl mx-auto px-4 py-8">
    {recipe.image && (
      <img
        src={recipe.image}
        alt={recipe.title}
        class="w-full h-48 md:h-96 object-cover mb-4 md:mb-8 rounded-2xl shadow-lg"
        loading="eager"
      />
    )}

    <div class="flex flex-col md:flex-row md:justify-between md:items-start gap-3 md:gap-4 mb-4 md:mb-8">
      <div class="flex-1">
        <h1 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-2 md:mb-4">{recipe.title}</h1>
        <p class="text-lg md:text-xl text-gray-600 dark:text-gray-300">{recipe.description}</p>
      </div>
      <div class="flex items-center gap-2 mt-2 md:mt-0">
        <FavoriteButton client:load recipeId={recipe.id} />
        <ShareButton
          client:load
          url={canonicalURL}
          title={recipe.title}
          image={fullImageUrl}
          description={recipe.description}
        />
      </div>
    </div>

    {/* Top Ad */}
    <GoogleAds slot="recipe-top-ad" client:load />

    <div class="flex flex-wrap items-center gap-3 md:gap-6 mb-4 md:mb-8 text-gray-600 dark:text-gray-300">
      <div class="flex items-center">
        <span class="mr-2">‚è±Ô∏è</span>
        <span>{recipe.cooking_time} minutes</span>
      </div>
      <div class="flex items-center">
        <span class="mr-2">üë•</span>
        <span>{recipe.servings} servings</span>
      </div>
      <time datetime={publishDate} class="text-gray-500 dark:text-gray-400">
        Published: {new Date(recipe.publish_date).toLocaleDateString()}
      </time>
    </div>

    {/* Macros Section */}
    <div class="mb-6 md:mb-12">
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-3 md:mb-4">Nutrition Information</h2>
      <div class="grid grid-cols-2 md:grid-cols-4 gap-3 md:gap-8 bg-white dark:bg-gray-800 p-4 md:p-6 rounded-xl border border-gray-200 dark:border-gray-700 shadow-sm">
        <div class="text-center">
          <div class="text-xl md:text-2xl font-bold text-primary-600 dark:text-primary-400">{recipe.calories}</div>
          <div class="text-sm text-gray-600 dark:text-gray-300">Calories</div>
        </div>
        <div class="text-center">
          <div class="text-xl md:text-2xl font-bold text-primary-600 dark:text-primary-400">{recipe.protein}g</div>
          <div class="text-sm text-gray-600 dark:text-gray-300">Protein</div>
        </div>
        <div class="text-center">
          <div class="text-xl md:text-2xl font-bold text-primary-600 dark:text-primary-400">{recipe.carbs}g</div>
          <div class="text-sm text-gray-600 dark:text-gray-300">Carbs</div>
        </div>
        <div class="text-center">
          <div class="text-xl md:text-2xl font-bold text-primary-600 dark:text-primary-400">{recipe.fat}g</div>
          <div class="text-sm text-gray-600 dark:text-gray-300">Fat</div>
        </div>
      </div>
    </div>

    <div class="grid grid-cols-1 gap-1 md:gap-12 mb-6 md:mb-12">
      <div class="w-full">
        <h2 class="text-2xl font-semibold mb-3 md:mb-4 text-gray-900 dark:text-white">Ingredients</h2>
        <ul class="grid grid-cols-2 gap-2 text-gray-600 dark:text-gray-300">
          {recipe.ingredients.map((ingredient: string) => (
            <li class="flex items-start bg-gray-50 dark:bg-gray-800 p-3 rounded-lg">
              <span class="mr-3 text-primary-500 dark:text-primary-400 mt-0.5">‚Ä¢</span>
              <span class="flex-1">{ingredient}</span>
            </li>
          ))}
        </ul>
      </div>

      {/* Middle Ad */}
      <GoogleAds slot="recipe-middle-ad" client:load />

      <div class="w-full">
        <h2 class="text-2xl font-semibold mb-3 md:mb-4 text-gray-900 dark:text-white">Instructions</h2>
        <ol class="space-y-3 md:space-y-4 text-gray-600 dark:text-gray-300">
          {recipe.instructions.map((instruction: string, index: number) => (
            <li class="flex items-start bg-gray-50 dark:bg-gray-800 p-3 rounded-lg">
              <span class="font-bold mr-3 md:mr-4 text-primary-500 dark:text-primary-400 mt-0.5">{index + 1}.</span>
              <span class="flex-1">{instruction}</span>
            </li>
          ))}
        </ol>
      </div>
    </div>

    {/* Bottom Ad */}
    <GoogleAds slot="recipe-bottom-ad" client:load />

    {recipe.tags && (
      <div class="mt-6 md:mt-12 mb-4 md:mb-8">
        <div class="flex flex-wrap gap-2">
          {recipe.tags.map((tag: string) => (
            <span class="px-3 py-1 bg-primary-500 text-white text-sm rounded-full">
              #{tag}
            </span>
          ))}
        </div>
      </div>
    )}

    {/* Rating Section */}
    <div class="mt-6 md:mt-12 pt-4 md:pt-8 border-t border-gray-200 dark:border-gray-700">
      <h2 class="text-2xl font-semibold text-gray-900 dark:text-white mb-4 md:mb-6 text-center">Rate this Recipe</h2>
      <RecipeRating
        client:load
        recipeId={recipe.id}
        initialRating={averageRating}
        totalRatings={totalRatings}
      />
    </div>
  </article>
</Layout>

<script>
  // Toast notification system
  function showToast(message: string, type: 'success' | 'info' | 'error' = 'success', duration = 3000) {
    const container = document.getElementById('toast-container');
    if (!container) return;

    // Create toast element
    const toast = document.createElement('div');
    toast.className = `flex items-center p-4 mb-3 max-w-xs rounded-lg shadow-lg transition-all transform translate-x-0 ${
      type === 'success'
        ? 'bg-green-50 text-green-800 dark:bg-green-900/50 dark:text-green-200 border-l-4 border-green-500'
        : type === 'error'
          ? 'bg-red-50 text-red-800 dark:bg-red-900/50 dark:text-red-200 border-l-4 border-red-500'
          : 'bg-blue-50 text-blue-800 dark:bg-blue-900/50 dark:text-blue-200 border-l-4 border-blue-500'
    }`;

    // Set toast content
    toast.innerHTML = `
      <div class="flex items-center">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          ${type === 'success' 
            ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />'
            : type === 'error'
              ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />'
              : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />'
          }
        </svg>
        <div class="ml-3 text-sm font-medium">${message}</div>
      </div>
      <button type="button" class="ml-auto -mx-1.5 -my-1.5 rounded-lg p-1.5 inline-flex h-8 w-8 hover:bg-gray-200 dark:hover:bg-gray-700" aria-label="Close">
        <span class="sr-only">Close</span>
        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
        </svg>
      </button>
    `;

    // Add toast to container with animation
    container.appendChild(toast);
    setTimeout(() => toast.classList.add('toast-enter'), 10);

    // Setup close button
    const closeButton = toast.querySelector('button');
    closeButton?.addEventListener('click', () => {
      toast.classList.add('toast-exit');
      setTimeout(() => toast.remove(), 300);
    });

    // Auto remove after duration
    setTimeout(() => {
      if (toast.parentNode) {
        toast.classList.add('toast-exit');
        setTimeout(() => toast.remove(), 300);
      }
    }, duration);
  }

  // Listen for favorite button events
  document.addEventListener('DOMContentLoaded', () => {
    // Find the favorite button in the DOM
    const favoriteBtn = document.querySelector('.favorite-btn') as HTMLElement;
    const shareBtn = document.querySelector('.share-btn') as HTMLElement;

    if (favoriteBtn) {
      // Replace the original click handler with our enhanced version
      const originalClickHandler = favoriteBtn.onclick;
      favoriteBtn.onclick = async (e) => {
        // Get the current state before toggling
        const wasAlreadyFavorited = favoriteBtn.classList.contains('favorited');

        // Call the original handler
        if (originalClickHandler) {
          originalClickHandler.call(favoriteBtn, e);
        }

        // Show appropriate toast message based on the previous state
        if (wasAlreadyFavorited) {
          showToast('Recipe removed from favorites', 'info');
        } else {
          showToast('Recipe added to favorites!', 'success');
        }
      };
    }

    if (shareBtn) {
      shareBtn.addEventListener('click', () => {
        showToast('Recipe link copied to clipboard!', 'success');
      });
    }

    // Setup a custom event listener as a fallback approach
    window.addEventListener('favoriteToggled', (e) => {
      const event = e as CustomEvent;
      const isFavorited = event.detail?.isFavorited;

      if (isFavorited === true) {
        showToast('Recipe added to favorites!', 'success');
      } else if (isFavorited === false) {
        showToast('Recipe removed from favorites', 'info');
      }
    });
  });
</script>

<style>
/* Toast animations */
@keyframes fadeIn {
  from { opacity: 0; transform: translateX(20px); }
  to { opacity: 1; transform: translateX(0); }
}

@keyframes fadeOut {
  from { opacity: 1; transform: translateX(0); }
  to { opacity: 0; transform: translateX(20px); }
}

.toast-enter {
  animation: fadeIn 0.3s ease-out forwards;
}

.toast-exit {
  animation: fadeOut 0.3s ease-out forwards;
}

/* Ensure instructions and ingredients text wrap properly on mobile */
ol li, ul li {
  word-break: break-word;
}
</style>