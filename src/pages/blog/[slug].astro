---
import Layout from '../../layouts/Layout.astro';
import { supabase } from '@/lib/supabase';
import type { BlogPost } from '@/lib/supabase';
import AnimatedCard from '@/components/AnimatedCard';

export async function getStaticPaths() {
  const { data: posts } = await supabase
    .from('blog_posts')
    .select('slug');

  return posts?.map(post => ({
    params: { slug: post.slug }
  })) || [];
}

const { slug } = Astro.params;

const { data: post } = await supabase
  .from('blog_posts')
  .select('*')
  .eq('slug', slug)
  .single();

if (!post) {
  return Astro.redirect('/404');
}

// Format date
const publishDate = new Date(post.publish_date).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// Get related posts
const { data: relatedPosts } = await supabase
  .from('blog_posts')
  .select('*')
  .neq('id', post.id)
  .contains('tags', post.tags)
  .limit(3);

// Convert markdown to HTML
import { marked } from 'marked';
const content = marked(post.content);

// Get full URLs for sharing
const siteUrl = import.meta.env.DEV ? `http://localhost:${import.meta.env.PORT || 4321}` : 'https://lowcalkitchen.com';
const canonicalURL = new URL(Astro.url.pathname, siteUrl).toString();
const fullImageUrl = post.image?.startsWith('http') ? post.image : new URL(post.image || '', siteUrl).toString();

// Structured data for blog post
const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": canonicalURL
  },
  "headline": post.title,
  "description": post.excerpt,
  "image": fullImageUrl,
  "author": {
    "@type": "Person",
    "name": post.author
  },
  "publisher": {
    "@type": "Organization",
    "name": "LowCal Kitchen",
    "logo": {
      "@type": "ImageObject",
      "url": `${siteUrl}/favicon.svg`
    }
  },
  "datePublished": new Date(post.publish_date).toISOString(),
  "dateModified": new Date(post.created_at).toISOString(),
  "keywords": post.tags.join(", ")
};
---

<Layout 
  title={`${post.title} - LowCal Kitchen Blog`}
  description={post.excerpt}
  image={fullImageUrl}
  type="article"
>
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />

  <article class="max-w-4xl mx-auto">
    {post.image && (
      <img
        src={post.image}
        alt={post.title}
        class="w-full h-96 object-cover rounded-2xl mb-8"
        loading="eager"
      />
    )}

    <div class="mb-8">
      <div class="flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-400 mb-4">
        <time datetime={post.publish_date}>{publishDate}</time>
        <span>•</span>
        <span>{post.reading_time} min read</span>
        <span>•</span>
        <span>By {post.author}</span>
      </div>

      <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">{post.title}</h1>
      <p class="text-xl text-gray-600 dark:text-gray-300">{post.excerpt}</p>
    </div>

    <div class="prose prose-lg dark:prose-invert max-w-none mb-12">
      <Fragment set:html={content} />
    </div>

    <div class="flex flex-wrap gap-2 mb-12">
      {post.tags.map(tag => (
        <a
          href={`/blog?tag=${tag}`}
          class="px-3 py-1 bg-primary-50 dark:bg-primary-900/30 text-primary-700 dark:text-primary-300 rounded-full text-sm hover:bg-primary-100 dark:hover:bg-primary-900/50 transition-colors"
        >
          #{tag}
        </a>
      ))}
    </div>

    {relatedPosts && relatedPosts.length > 0 && (
      <section class="border-t dark:border-gray-700 pt-12">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-8">Related Articles</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
          {relatedPosts.map((relatedPost, index) => (
            <AnimatedCard client:load delay={index * 0.1}>
              <a
                href={`/blog/${relatedPost.slug}`}
                class="block bg-white dark:bg-gray-800 rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-shadow"
              >
                {relatedPost.image && (
                  <img
                    src={relatedPost.image}
                    alt={relatedPost.title}
                    class="w-full h-48 object-cover"
                  />
                )}
                <div class="p-6">
                  <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2 line-clamp-2">
                    {relatedPost.title}
                  </h3>
                  <p class="text-gray-600 dark:text-gray-300 text-sm line-clamp-2">
                    {relatedPost.excerpt}
                  </p>
                </div>
              </a>
            </AnimatedCard>
          ))}
        </div>
      </section>
    )}
  </article>
</Layout>