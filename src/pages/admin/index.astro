---
import Layout from '../../layouts/Layout.astro';
import { supabase } from '@/lib/supabase';
import RecipeEditor from '@/components/admin/RecipeEditor';

// Check if user is authenticated and admin
const { data: { session } } = await supabase.auth.getSession();

if (!session) {
  return Astro.redirect('/');
}

// Get user's role
const { data: user } = await supabase
  .from('auth.users')
  .select('role')
  .eq('id', session.user.id)
  .single();

// Check if user is admin
if (!user || user.role !== 'admin') {
  return Astro.redirect('/');
}

// Get all recipes
const { data: recipes } = await supabase
  .from('recipes')
  .select('*')
  .order('created_at', { ascending: false });

// Get all categories
const { data: categories } = await supabase
  .from('categories')
  .select('*')
  .order('name');
---

<Layout title="Admin Dashboard - LowCal Kitchen">
  <div class="max-w-7xl mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Admin Dashboard</h1>
      <div class="flex gap-4">
        <button
          id="refreshBtn"
          class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
        >
          Refresh Data
        </button>
        <button
          id="newRecipeBtn"
          class="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
        >
          Add New Recipe
        </button>
      </div>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
      <div class="mb-6">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Recipes</h2>
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead>
              <tr class="border-b dark:border-gray-700">
                <th class="text-left py-3 px-4">Title</th>
                <th class="text-left py-3 px-4">Category</th>
                <th class="text-left py-3 px-4">Created</th>
                <th class="text-right py-3 px-4">Actions</th>
              </tr>
            </thead>
            <tbody id="recipesTableBody">
              {recipes?.map((recipe) => (
                <tr class="border-b dark:border-gray-700">
                  <td class="py-3 px-4">{recipe.title}</td>
                  <td class="py-3 px-4">{recipe.tags.join(', ')}</td>
                  <td class="py-3 px-4">
                    {new Date(recipe.created_at).toLocaleDateString()}
                  </td>
                  <td class="py-3 px-4 text-right">
                    <button
                      class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 mr-3"
                      data-edit-id={recipe.id}
                    >
                      Edit
                    </button>
                    <button
                      class="text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300"
                      data-delete-id={recipe.id}
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <RecipeEditor client:load categories={categories || []} />
</Layout>

<script>
  import { supabase } from '@/lib/supabase';

  async function refreshData() {
    const { data: recipes } = await supabase
      .from('recipes')
      .select('*')
      .order('created_at', { ascending: false });

    const tbody = document.getElementById('recipesTableBody');
    if (tbody && recipes) {
      tbody.innerHTML = recipes.map((recipe) => `
        <tr class="border-b dark:border-gray-700">
          <td class="py-3 px-4">${recipe.title}</td>
          <td class="py-3 px-4">${recipe.tags.join(', ')}</td>
          <td class="py-3 px-4">
            ${new Date(recipe.created_at).toLocaleDateString()}
          </td>
          <td class="py-3 px-4 text-right">
            <button
              class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 mr-3"
              data-edit-id="${recipe.id}"
            >
              Edit
            </button>
            <button
              class="text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300"
              data-delete-id="${recipe.id}"
            >
              Delete
            </button>
          </td>
        </tr>
      `).join('');

      // Reattach event listeners
      attachEventListeners();
    }
  }

  function attachEventListeners() {
    const editButtons = document.querySelectorAll('[data-edit-id]');
    const deleteButtons = document.querySelectorAll('[data-delete-id]');

    editButtons.forEach(button => {
      button.addEventListener('click', () => {
        const recipeId = button.getAttribute('data-edit-id');
        const event = new CustomEvent('openRecipeEditor', {
          detail: { mode: 'edit', recipeId }
        });
        window.dispatchEvent(event);
      });
    });

    deleteButtons.forEach(button => {
      button.addEventListener('click', async () => {
        const recipeId = button.getAttribute('data-delete-id');
        if (confirm('Are you sure you want to delete this recipe?')) {
          const event = new CustomEvent('deleteRecipe', {
            detail: { recipeId }
          });
          window.dispatchEvent(event);
          
          // Refresh the data after deletion
          setTimeout(refreshData, 500);
        }
      });
    });
  }

  // Initial setup
  document.addEventListener('DOMContentLoaded', () => {
    const newRecipeBtn = document.getElementById('newRecipeBtn');
    const refreshBtn = document.getElementById('refreshBtn');

    newRecipeBtn?.addEventListener('click', () => {
      const event = new CustomEvent('openRecipeEditor', {
        detail: { mode: 'create' }
      });
      window.dispatchEvent(event);
    });

    refreshBtn?.addEventListener('click', refreshData);

    // Attach initial event listeners
    attachEventListeners();

    // Listen for recipe updates
    window.addEventListener('recipeUpdated', () => {
      setTimeout(refreshData, 500);
    });
  });
</script>